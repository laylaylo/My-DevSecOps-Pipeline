name: DevSecOps Pipeline

on:
  push:
    branches:
      - main

jobs:
  devSecOps:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up python environment
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
        
    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Code linting with Pylint
      run: |
        pip install pylint
        pylint src/*.py
        
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
      
    - name: Unit testing with pytest
      run: |
        pip install pytest
        pytest

    #- name: Static Application Security Testing with CodeQL
    #  uses: github/codeql-action/analyze@v2

    - name: Build Docker Image
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} 
      run: docker build -t gcr.io/$GCP_PROJECT_ID/flask-app:latest .

    - name: Push Docker Image to Google Artifact Registry
      env:
        GCP_JSON_KEY: ${{ secrets.GCP_KEY }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} 
      run: |
        echo "$GCP_JSON_KEY" | docker login -u _json_key --password-stdin https://gcr.io
        docker push gcr.io/$GCP_PROJECT_ID/flask-app:latest


    - name: Scan the Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gcr.io/${{ secrets.GCP_PROJECT_ID }}/flask-app:latest'
        format: 'table'
        exit-code: '1'

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ secrets.GCP_K8S_KEY }} 
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: '>= 363.0.0'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: "kubectl" 
    
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials devsecops-pipeline-cluster-1 --zone us-central1-c --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Get cluster info
      run: kubectl cluster-info
  
    - name: Install OPA Gatekeeper
      run: |
        kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/v3.14.0/deploy/gatekeeper.yaml

    - name: Verify Gatekeeper Installation
      run: |
        kubectl get pods -n gatekeeper-system

    - name: Apply OPA Gatekeeper Constraint Template
      run: |
        kubectl create -f constraint-template.yaml

    - name: Apply OPA Gatekeeper Constraint
      run: |
        kubectl create -f gatekeeper-constraint.yaml

    - name: Verify Gatekeeper Constraint
      run: |
        kubectl get K8sAllowedRepos allowed-repos -o yaml

    - name: Deploy to Kubernetes
      run: kubectl apply -f deployment.yaml
